import java.util.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;
public class App {
    
    public static void main(String[] args) throws Exception {
    
        List<Map<String,Object>>list=new ArrayList<>();
        Map<String,Integer>innerMap=new HashMap<>();
        innerMap.put("AA1", null);
        innerMap.put("B",2);
        innerMap.put("C",2);
        innerMap.put("D",null);

        Map<String,Integer>innerMap1=new HashMap<>();
        innerMap1.put("AA1", null);
        innerMap1.put("BB",22);
        innerMap1.put("CC",22);
        innerMap1.put("DD",null);
        innerMap1.put("EE",33);
        innerMap1.put("FF",47);

        Map<String,String>stringMap=new HashMap<>();
        stringMap.put("1", null);
        stringMap.put("2","22");
        stringMap.put("3","33");
        stringMap.put("4",null);

        Map<String,Object>outerMap=new HashMap<>();
        outerMap.put("zxc","cxz");
        outerMap.put("mnb","bnm");
        outerMap.put("id",2);
        outerMap.put("total",22);
        outerMap.put("Manoj",innerMap);
        outerMap.put("Manoj_String",stringMap);
        outerMap.put("map_test",null);

        Map<String,Object>outerMap2=new HashMap<>();
        outerMap2.put("asd","dsa");
        outerMap2.put("lkj","jkl");
        outerMap2.put("tfc","cft");
        outerMap2.put("total",null);
        outerMap2.put("id",1);
        outerMap2.put("Suraj",innerMap1);
        outerMap2.put("Suraj_String",stringMap);

        list.add(outerMap); 
        list.add(outerMap2);

       List<Map<String,Object>>filterd_list=list.stream().filter(ol->ol.containsKey("Manoj")).collect(Collectors.toList());
       System.out.println("filterd_list :- "+filterd_list);
      
       Map<String,Integer>map_filterd=list.stream().filter(ol->ol.containsKey("Manoj") && ol.get("Manoj")!=null ).map(mp->(Map<String,Integer>)mp.get("Manoj")).findFirst().orElse(new HashMap<>());
       System.out.println("map_filterd :- "+map_filterd);
       
      Optional<Map<String,Integer>>map_filterd1= list.stream().filter(ol->ol.containsKey("Manoj") && ol.get("Manoj") !=null).map(mp->(Map<String,Integer>)mp.get("Manoj")).findFirst();
      System.out.println(map_filterd1.isPresent()?map_filterd1.get().get("B"):"Map IS empty man why you finding B Value");

      String two_value=list.stream().filter(ol->ol.containsKey("Manoj_String") && ol.get("Manoj_String")!=null).map(mp->(Map<String,String>)mp.get("Manoj_String")).filter(mp->mp.containsKey("2") && mp.get("2") !=null).map(mp->mp.get("2")).findFirst().orElse(null);
      System.out.println("two_value :- "+two_value);

      Optional<String>two_value1=list.stream().filter(ol->ol.containsKey("Manoj_String") && ol.get("Manoj_String")!=null).map(mp->(Map<String,String>)mp.get("Manoj_String")).filter(mp->mp.containsKey("2") && mp.get("2") !=null).map(mp->mp.get("2")).findFirst();
      System.out.println(two_value1.isPresent()?two_value1.get():"String is empty man");
     
      int sum=innerMap.values().stream().filter(v->v!=null).mapToInt(Integer::intValue).reduce(0,(a,b)->a+b);
      System.out.println("sum :- "+sum);

      int sum1=innerMap.values().stream().filter(v->v!=null).mapToInt(Integer::intValue).sum();
      System.out.println("sum1 :- "+sum1);

      int innerSum= list.stream().filter(ol->ol.containsKey("total") && ol.get("total") !=null).map(mp->(int)mp.get("total")).reduce(0,(a,b)->a+b);
      System.out.println("innerSum :- "+innerSum);

      String stringConCatWithDeli=stringMap.keySet().stream().filter(k->k!=null).collect(Collectors.joining(","));
      System.out.println("stringConCatWithDeli :- "+stringConCatWithDeli);

      String stringConCatWithoutDeli=stringMap.keySet().stream().filter(k->k!=null).collect(Collectors.joining(""));
      System.out.println("stringConCatWithoutDeli :- "+stringConCatWithoutDeli);
     
      Map<Boolean,List<Integer>>partitioningBy=innerMap1.values().stream().filter(v->v!=null).collect(Collectors.partitioningBy(n->n%2==0));
      System.out.println("partitioningBy :- "+partitioningBy);

      Map<Integer,List<Integer>>groupingBy=innerMap1.values().stream().filter(v->v!=null).collect(Collectors.groupingBy(n->n%3));
      System.out.println("groupingBy :- "+groupingBy);

     List<Integer>distinct_List= innerMap1.values().stream().filter(v->v!=null).distinct().collect(Collectors.toList());
     System.out.println("distinct_List :- "+distinct_List);


     Set<Integer>set=innerMap1.values().stream().filter(v->v!=null).collect(Collectors.toSet());
     System.out.println("set :- "+set);

    List<Map<String,Object>>list_sort= list.stream().filter(ol->ol.containsKey("id") && ol.get("id")!=null).sorted((a,b)->((Integer) a.get("id")).compareTo((Integer)b.get("id"))).collect(Collectors.toList());
     System.out.println("list_sort :- "+list_sort);

     int sand[]={2,1,3,5,4};

     Integer[] sand_Integer=Arrays.stream(sand).boxed().toArray(Integer[] ::new);
     System.out.println("sand_Integer :- "+Arrays.toString(sand_Integer));

     List<Integer>sand_list=Arrays.stream(sand).boxed().collect(Collectors.toList());
     System.out.println("sand_list :- "+sand_list);

      int sand_reverseOrder[]=Arrays.stream(sand).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray();
      System.out.println("sand_reverseOrder :- "+Arrays.toString(sand_reverseOrder));

    int ascending_order[] = Arrays.stream(sand)
    .boxed()
    .sorted() // Sort in ascending order
    .mapToInt(Integer::intValue)
    .toArray();

    System.out.println("ascending_order :- "+Arrays.toString(ascending_order));

     List<Integer>sandDc_sort_List= sand_list.stream().filter(v->v!=null).sorted((a,b)->b.compareTo(a)).collect(Collectors.toList());
     System.out.println("sandDc_sort_List :- "+sandDc_sort_List);

     List<Integer>sandAc_sort_List= sand_list.stream().filter(v->v!=null).sorted().collect(Collectors.toList());
     System.out.println("sandAc_sort_List :- "+sandAc_sort_List);

     List<Integer> peekTest= innerMap.values().stream().filter(v->v!=null && v%2==0).peek(p->System.out.println(p)).collect(Collectors.toList());
     System.out.println("peekTest :- "+peekTest);
      
     List<List<String>>listList=new ArrayList<>();
     List<String>list_1=new ArrayList<>();
     List<String>list_2=new ArrayList<>();
   
     list_1.add("Manoj");
     list_2.add("Suraj");
   
     listList.add(list_1);
     listList.add(list_2);
   
     System.out.println("WithoutFaltMapConcept  see Object is look like :- "+listList);

     List<String>list_FlatMap=listList.stream().filter(v->v!=null).flatMap(fl->fl.stream()).collect(Collectors.toList());
     System.out.println("list_FlatMap :- "+list_FlatMap);
   

 
  }
  
 }

